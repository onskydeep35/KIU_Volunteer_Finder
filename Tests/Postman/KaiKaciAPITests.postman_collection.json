{
	"info": {
		"_postman_id": "d9e27d3f-05cf-4fef-ae87-c5c35beec436",
		"name": "KaiKaci API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35027356"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Signup - Happy Path",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 201\", () => pm.response.to.have.status(201));\r",
									"\r",
									"const reqBody = JSON.parse(pm.request.body.raw);\r",
									"const resBody = pm.response.json();\r",
									"\r",
									"\r",
									"pm.environment.set(\"username\", reqBody.username);\r",
									"\r",
									"\r",
									"pm.test(\"Email echoes back\", () => pm.expect(resBody.email).to.eql(reqBody.email));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"John\",\r\n  \"last_name\": \"Doe\",\r\n  \"age\": 28,\r\n  \"sex\": \"Male\",\r\n  \"email\": \"john.doe@example.com\",\r\n  \"username\": \"johndoe\",\r\n  \"password\": \"Passw0rd!\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/signup",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Happy Path",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"const data = pm.response.json();\r",
									"pm.test(\"Username matches\", () => pm.expect(data.username).to.eql(\"johndoe\"));\r",
									"// (optional) store entire user for later\r",
									"pm.environment.set(\"auth_user\", JSON.stringify(data));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/login?user_identifier=johndoe&password=Passw0rd!",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"login"
							],
							"query": [
								{
									"key": "user_identifier",
									"value": "johndoe"
								},
								{
									"key": "password",
									"value": "Passw0rd!"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Invalid Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 401\", () => pm.response.to.have.status(401));\r",
									"const error = pm.response.json();\r",
									"pm.test(\"Error message present\", () => pm.expect(error).to.have.property(\"error\"));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/login?user_identifier=johndoe&password=WrongPass123",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"login"
							],
							"query": [
								{
									"key": "user_identifier",
									"value": "johndoe"
								},
								{
									"key": "password",
									"value": "WrongPass123"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Load User - 200 (valid id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/load?user_identifier=JohnDoe",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"load"
							],
							"query": [
								{
									"key": "user_identifier",
									"value": "JohnDoe"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Random User - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"const data = pm.response.json();\r",
									"pm.test(\"User object has username\", () => pm.expect(data).to.have.property(\"username\"));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/random",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"random"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "Create Event - Happy Path",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 201\", () => pm.response.to.have.status(201));\r",
									"\r",
									"const req = JSON.parse(pm.request.body.raw);\r",
									"const res = pm.response.json();\r",
									"\r",
									"// basic echo check\r",
									"pm.test(\"Title matches request\", () => pm.expect(res.title).to.eql(req.title));\r",
									"\r",
									"// store event_id (or whatever key your API returns)\r",
									"if (res.event_id) {\r",
									"  pm.environment.set(\"event_id\", res.event_id);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\"title\": \"Beach Cleanup\", \r\n\"description\": \"Help us keep the shoreline clean!\", \r\n\"date\": \"2025-08-15T09:00:00Z\", \r\n\"location\": \"Batumi, Georgia\", \r\n\"image_url\": \"https://example.com/beach.jpg\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/events/create",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Load Event - 200 (valid id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"const body = pm.response.json();\r",
									"pm.test(\"Returns correct title\", () =>\r",
									"  pm.expect(body.title).to.eql(\"Beach Cleanup\")   // adjust if you changed title\r",
									");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/events/load?entity_id=003a7d58-2a6e-4202-a619-6035320a1624",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"load"
							],
							"query": [
								{
									"key": "entity_id",
									"value": "003a7d58-2a6e-4202-a619-6035320a1624"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Load Event - 404 (Unknow ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 404\", () => pm.response.to.have.status(404));\r",
									"pm.expect(pm.response.json()).to.have.property(\"error\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/events/load?entity_id=nonexistent-event-123",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"load"
							],
							"query": [
								{
									"key": "entity_id",
									"value": "nonexistent-event-123"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Event - 200 (no filter)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"const list = pm.response.json();\r",
									"pm.test(\"Array has â‰¥ 1 event\", () => pm.expect(list.length).to.be.above(0));\r",
									"pm.test(\"Contains Beach Cleanup event\", () =>\r",
									"  pm.expect(list.some(e => e.title === \"Beach Cleanup\")).to.be.true\r",
									");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/events/loadMany",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"loadMany"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Event - Happy Path",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"const res = pm.response.json();\r",
									"pm.test(\"Title updated\", () => pm.expect(res.title).to.eql(\"Beach Cleanup (Updated)\"));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"entity_id\": \"{{event_id}}\",\r\n  \"title\": \"Beach Cleanup (Updated)\",\r\n  \"description\": \"Bring gloves and trash bags!\",\r\n  \"location\": \"Batumi, Georgia\",\r\n  \"date\": \"2025-08-15T09:00:00Z\",\r\n  \"image_url\": \"https://example.com/beach_v2.jpg\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/events/update",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Event - Happy Path",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"Success flag true\", () => {\r",
									"  const res = pm.response.json();\r",
									"  pm.expect(res.success || res.deleted).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "json { \"entity_id\": \"{{event_id}}\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/events/delete",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"delete"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}